#
# The following environment variables should be predefined:
#
# OP2_COMPILER (gnu,intel,etc)
#
# ... and optionally the following. If not defined, then 
# they must be locatable via PATH variables:
#
# OP2_INSTALL_PATH
# CUDA_INSTALL_PATH
# PARMETIS_INSTALL_PATH
# PTSCOTCH_INSTALL_PATH
#

include ../../make-common.inc

ifeq ($(OP2_COMPILER),gnu)
  CPP		= g++
  CPPFLAGS	= -g -fPIC -DUNIX -Wall #-Wextra
  OMPFLAGS	= -fopenmp
  MPICPP	= $(MPICXX_PATH)
  MPIFLAGS	= $(CCFLAGS)
else
ifeq ($(OP2_COMPILER),intel)
  CPP		= icpc
  CCFLAGS	= -O3 -xHost -DMPICH_IGNORE_CXX_SEEK -restrict -fno-alias -inline-forceinline -qopt-report=5 -parallel -DVECTORIZE
  CPPFLAGS 	= $(CCFLAGS)
  OMPFLAGS	= -qopenmp #-openmp-report2
  MPICPP	= $(MPICXX_PATH)
  # NVCCFLAGS	= -ccbin=$(MPICPP)
  MPIFLAGS	= $(CPPFLAGS)
else
ifeq ($(OP2_COMPILER),pgi)
  CPP           = pgc++
  CCFLAGS       = -O3
  CPPFLAGS      = $(CCFLAGS)
  OMPFLAGS      = -mp
  MPICC         = $(MPICC_PATH)
  MPICPP        = $(MPICXX_PATH)
  MPIFLAGS      = $(CPPFLAGS)
  NVCCFLAGS     = -ccbin=$(MPICPP)
  ACCFLAGS      = -acc -Minfo=acc -ta=tesla:cc35 -DOPENACC
else
print:
	@echo "unrecognised value for OP2_COMPILER"
endif
endif
endif

#
# set flags for NVCC compilation and linking
#
ifndef NV_ARCH
  MESSAGE=select an NVIDA device to compile in CUDA, e.g. make NV_ARCH=KEPLER
  NV_ARCH=Kepler
endif
ifeq ($(NV_ARCH),Fermi)
  CODE_GEN_CUDA=-gencode arch=compute_20,code=sm_21
else
ifeq ($(NV_ARCH),Kepler)
  CODE_GEN_CUDA=-gencode arch=compute_35,code=sm_35
endif
endif

NVCCFLAGS += -O3 $(CODE_GEN_CUDA) -m64 -Xptxas -dlcm=ca -Xptxas=-v -use_fast_math #-g -G -O0

#VAR		= -DOP_PART_SIZE_1=512 -DOP_PART_SIZE_2=1024 -DOP_PART_SIZE_3=64
#-DOP_BLOCK_SIZE_0=512 -DOP_BLOCK_SIZE_1=64 -DOP_BLOCK_SIZE_2=64 -DOP_BLOCK_SIZE_3=64 -DOP_BLOCK_SIZE_4=64

#
# master to make all versions
#
ALL_TARGETS = clean reduction_seq reduction_genseq reduction_openmp reduction_cuda reduction_mpi reduction_mpi_cuda reduction_mpi_openmp

ifeq ($(OP2_COMPILER),pgi)
        ALL_TARGETS += #reduction_openacc
endif
ifeq ($(OP2_COMPILER),intel)
        ALL_TARGETS += reduction_vec
endif

all: $(ALL_TARGETS)

#
# simple sequential version
#

reduction_seq: reduction.cpp res_calc.h update.h Makefile
	     $(CPP) $(CPPFLAGS) reduction.cpp $(OP2_INC) $(OP2_LIB) -lop2_seq -o reduction_seq


#
# code generated sequential x86 version using kernel files generated by op2.py
#

reduction_genseq: reduction_op.cpp seq/reduction_seqkernels.cpp \
                seq/res_calc_seqkernel.cpp   res_calc.h  \
                seq/update_seqkernel.cpp     update.h    \
		Makefile
		$(CPP) $(VAR) $(CPPFLAGS) reduction_op.cpp seq/reduction_seqkernels.cpp -Iseq -I. \
                $(OP2_INC) $(OP2_LIB) -lop2_seq -o reduction_genseq

#
# code generated x86 vectorized version using kernel files generated by op2.py
#

reduction_vec: reduction_op.cpp vec/reduction_veckernels.cpp \
                vec/res_calc_veckernel.cpp   res_calc.h  \
                vec/update_veckernel.cpp     update.h    \
                Makefile
		$(CPP) $(VAR) $(OMPFLAGS) $(CPPFLAGS) reduction_op.cpp vec/reduction_veckernels.cpp -Ivec -I. \
                $(OP2_INC) $(OP2_LIB) -lop2_seq -o reduction_vec


#
# x86 version using kernel files generated by op2.m
#

reduction_openmp: reduction_op.cpp openmp/reduction_kernels.cpp \
		openmp/res_calc_kernel.cpp   res_calc.h  \
		openmp/update_kernel.cpp     update.h    \
                Makefile
		$(CPP) $(VAR) $(CPPFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_LIB) -Iopenmp/ -I. \
		reduction_op.cpp openmp/reduction_kernels.cpp -lm -lop2_openmp -o reduction_openmp

#
# CUDA version using kernel files generated by op2.m
#

reduction_cuda:	reduction_op.cpp cuda/reduction_kernels_cu.o Makefile
		$(CPP) $(VAR) $(CPPFLAGS) $(CUDA_INC) $(OP2_INC) $(OP2_LIB) $(CUDA_LIB) \
		reduction_op.cpp cuda/reduction_kernels_cu.o -lcudart -lop2_cuda -o reduction_cuda

cuda/reduction_kernels_cu.o:	cuda/reduction_kernels.cu      \
		cuda/res_calc_kernel.cu  res_calc.h  \
		cuda/update_kernel.cu    update.h    \
		Makefile
		nvcc $(VAR) $(INC) $(NVCCFLAGS) $(OP2_INC) \
		-Icuda -I. -c -o cuda/reduction_kernels_cu.o \
		cuda/reduction_kernels.cu

#
# mpi with sequential-nodes version
#

reduction_mpi: reduction_mpi.cpp update.h res_calc.h Makefile
	$(MPICPP) $(MPIFLAGS) $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) \
	$(OP2_LIB) reduction_mpi.cpp -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB) -o reduction_mpi

#
# mpi with openmp-nodes version
#

reduction_mpi_openmp: reduction_mpi_op.cpp openmp/reduction_kernels.cpp \
		    openmp/res_calc_kernel.cpp   res_calc.h  \
		    openmp/update_kernel.cpp     update.h    \
		    Makefile
		    $(MPICPP) $(MPIFLAGS) $(OMPFLAGS) reduction_mpi_op.cpp openmp/reduction_kernels.cpp \
		    $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC) -Iopenmp -I. \
		    $(OP2_LIB) -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB) -o reduction_mpi_openmp

#
# mpi with CUDA version
#

reduction_mpi_cuda:	reduction_mpi_op.cpp cuda/reduction_kernels_mpi_cu.o Makefile
		  $(MPICPP) $(MPIFLAGS) reduction_mpi_op.cpp cuda/reduction_kernels_mpi_cu.o \
		  $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) \
		  $(OP2_LIB) -lop2_mpi_cuda $(PARMETIS_LIB) $(PTSCOTCH_LIB) \
		  $(CUDA_LIB) -lcudart -o reduction_mpi_cuda

cuda/reduction_kernels_mpi_cu.o:	cuda/reduction_kernels.cu      \
		  cuda/res_calc_kernel.cu   res_calc.h  \
		  cuda/update_kernel.cu     update.h    \
		  Makefile
		  nvcc  $(INC) $(NVCCFLAGS) $(OP2_INC) -I $(MPI_INSTALL_PATH)/include \
		  -Icuda -I. -c -o cuda/reduction_kernels_mpi_cu.o cuda/reduction_kernels.cu

#
# cleanup
#

clean:
		rm -f reduction_seq reduction_genseq reduction_vec reduction_openmp reduction_cuda reduction_mpi reduction_mpi_cuda reduction_mpi_openmp *.o cuda/*.o
